{"version":3,"sources":["components/FeelingFeedback/FeelingReview.js","components/FeelingFeedback/FeelingFeedback.js","components/UnderstandingFeedback/UnderstandingReview.js","components/UnderstandingFeedback/UnderstandingFeedback.js","components/SupportFeedback/SupportReview.js","components/SupportFeedback/SupportFeedback.js","components/CommentsFeedback/CommentsReview.js","components/CommentsFeedback/CommentsFeedback.js","components/ReviewPage/ReviewPage.js","components/ReviewPage/ThankyouPage.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["FeelingReview","react_default","a","createElement","this","props","reduxStore","feedbackReview","feeling","understanding","support","comments","Button_default","variant","size","color","className","Component","connect","FeelingFeedback","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","feelingChange","event","setState","feelingToAdd","parseInt","target","value","submitFeeling","action","type","payload","state","dispatch","history","push","FormControl_default","InputLabel_default","required","htmlFor","NativeSelect_default","onChange","input","Input_default","name","FormHelperText_default","onClick","FeelingFeedback_FeelingReview","UnderstandingReview","UnderstandingFeedback","understandingToChange","understandingToAdd","submitUnderstanding","UnderstandingFeedback_UnderstandingReview","SupportReview","SupportFeedback","supportToChange","supportToAdd","submitSupport","SupportFeedback_SupportReview","CommentsReview","commentsChange","commentsToAdd","submitComments","TextField_default","id","label","multiline","rows","margin","CommentsFeedback_CommentsReview","Review","submitFeedback","feedbackToServer","axios","method","url","data","then","response","catch","error","alert","Thankyou","submitNewFeedback","App","HashRouter","Route","exact","path","component","CommentsFeedback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","feedbackReviewItems","storeInstance","createStore","combineReducers","arguments","length","undefined","objectSpread","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qUAIMA,mLAEE,OAGIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBAAgBC,KAAKC,MAAMC,WAAWC,eAAeC,QAArD,KACAP,EAAAC,EAAAC,cAAA,4BAAoBC,KAAKC,MAAMC,WAAWC,eAAeE,eACzDR,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeG,SACnDT,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,WAAWC,eAAeI,UACpDV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAQ,WAAWC,KAAK,SAASC,MAAM,UAAUC,UAAU,YAAnE,wBAbQC,aAsBbC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BlB,wFChBvCmB,cACF,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KASVqB,cAAgB,SAACC,GACbP,EAAKQ,SAAS,CACVC,aAAcC,SAASH,EAAMI,OAAOC,UAZzBZ,EAkBnBa,cAAgB,WACZ,IACIC,EAAS,CAAEC,KAAM,cAAeC,QADtBhB,EAAKiB,MAAMR,cAEzBT,EAAKf,MAAMiC,SAASJ,GACpBd,EAAKf,MAAMkC,QAAQC,KAAK,2BApBxBpB,EAAKiB,MAAQ,CACTR,aAAc,CACVrB,QAAS,KAJFY,wEAyBf,OAEInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,KACID,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAYyC,UAAQ,EAACC,QAAQ,qBAA7B,UACA3C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACI8B,MAAO5B,KAAKiC,MAAM7B,QAClBsC,SAAU1C,KAAKsB,cACfqB,MAAO9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAO+C,KAAK,YACnBhD,EAAAC,EAAAC,cAAA,UAAQ6B,MAAM,KACd/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,OAEJ/B,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,kDAEJD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiD,QAAS/C,KAAK6B,cAAepB,QAAQ,WAAWC,KAAK,SAASC,MAAM,WAA5E,UACAd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAD,cAjDcnC,aA2DfC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BC,GCjEvCkC,mLAEE,OAGIpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBAAgBC,KAAKC,MAAMC,WAAWC,eAAeC,QAArD,KACAP,EAAAC,EAAAC,cAAA,4BAAoBC,KAAKC,MAAMC,WAAWC,eAAeE,eACzDR,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeG,SACnDT,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,WAAWC,eAAeI,UACpDV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAQ,WAAWC,KAAK,SAASC,MAAM,UAAUC,UAAU,YAAnE,wBAbcC,aAuBnBC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BmC,GCjBvCC,cACF,SAAAA,EAAYjD,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAkD,IACflC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAArB,KAAMC,KASVkD,sBAAwB,SAAC5B,GACrBP,EAAKQ,SAAS,CACV4B,mBAAoB1B,SAASH,EAAMI,OAAOC,UAZ/BZ,EAkBnBqC,oBAAsB,WAClB,IACIvB,EAAS,CAAEC,KAAM,oBAAqBC,QADtBhB,EAAKiB,MAAMmB,oBAE/BpC,EAAKf,MAAMiC,SAASJ,GACpBd,EAAKf,MAAMkC,QAAQC,KAAK,qBApBxBpB,EAAKiB,MAAQ,CACTmB,mBAAoB,CAChB/C,cAAe,KAJRW,wEAyBf,OAEInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,KACID,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAYyC,UAAQ,EAACC,QAAQ,qBAA7B,UACA3C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACI8B,MAAO5B,KAAKiC,MAAM5B,cAClBqC,SAAU1C,KAAKmD,sBACfR,MAAO9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAO+C,KAAK,YACnBhD,EAAAC,EAAAC,cAAA,UAAQ6B,MAAM,KACd/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,OAEJ/B,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,kDAEJD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiD,QAAS/C,KAAKqD,oBAAqB5C,QAAQ,WAAWC,KAAK,SAASC,MAAM,WAAlF,UACAd,EAAAC,EAAAC,cAACuD,EAAD,cAhDoBzC,aA0DrBC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BoC,GChEvCK,mLAEE,OAGI1D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBAAgBC,KAAKC,MAAMC,WAAWC,eAAeC,QAArD,KACAP,EAAAC,EAAAC,cAAA,4BAAoBC,KAAKC,MAAMC,WAAWC,eAAeE,eACzDR,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeG,SACnDT,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,WAAWC,eAAeI,UACpDV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAQ,WAAWC,KAAK,SAASC,MAAM,UAAUC,UAAU,YAAnE,wBAbQC,aAuBbC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8ByC,GCjBvCC,cACF,SAAAA,EAAYvD,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAwD,IACfxC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAuC,GAAAnC,KAAArB,KAAMC,KASVwD,gBAAkB,SAAClC,GACfP,EAAKQ,SAAS,CACVkC,aAAchC,SAASH,EAAMI,OAAOC,UAZzBZ,EAmBnB2C,cAAgB,WACZ,IACI7B,EAAS,CAAEC,KAAM,cAAeC,QADtBhB,EAAKiB,MAAMyB,cAEzB1C,EAAKf,MAAMiC,SAASJ,GACpBd,EAAKf,MAAMkC,QAAQC,KAAK,sBArBxBpB,EAAKiB,MAAQ,CACTyB,aAAc,CACVpD,QAAS,KAJFU,wEA0Bf,OAEInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,KACID,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAYyC,UAAQ,EAACC,QAAQ,qBAA7B,UACA3C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACI8B,MAAO5B,KAAKiC,MAAM3B,QAClBoC,SAAU1C,KAAKyD,gBACfd,MAAO9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAO+C,KAAK,YACnBhD,EAAAC,EAAAC,cAAA,UAAQ6B,MAAM,KACd/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,MACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,KACA/B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAO,GAAf,OAEJ/B,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,kDAfR,IAgBmBD,EAAAC,EAAAC,cAAA,WAhBnB,IAgB0BF,EAAAC,EAAAC,cAAA,WACtBF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiD,QAAS/C,KAAK2D,cAAelD,QAAQ,WAAWC,KAAK,SAASC,MAAM,WAA5E,UACAd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6D,EAAD,cAjDc/C,aA2DfC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8B0C,GCjEvCK,mLAEE,OAGIhE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBAAgBC,KAAKC,MAAMC,WAAWC,eAAeC,QAArD,KACAP,EAAAC,EAAAC,cAAA,4BAAoBC,KAAKC,MAAMC,WAAWC,eAAeE,eACzDR,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeG,SACnDT,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,WAAWC,eAAeI,UACpDV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAQ,WAAWC,KAAK,SAASC,MAAM,UAAUC,UAAU,YAAnE,wBAbSC,aAuBdC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8B+C,qBCrBvC9C,cACF,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KASV6D,eAAiB,SAACvC,GACdP,EAAKQ,SAAS,CACVuC,cAAgBxC,EAAMI,OAAOC,SAZlBZ,EAkBnBgD,eAAiB,WACb,IACIlC,EAAS,CAAEC,KAAM,eAAgBC,QADtBhB,EAAKiB,MAAM8B,eAE1B/C,EAAKf,MAAMiC,SAASJ,GACpBd,EAAKf,MAAMkC,QAAQC,KAAK,YApBxBpB,EAAKiB,MAAQ,CACT8B,cAAe,CACXxD,SAAU,KAJHS,wEAyBf,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0DAEAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACIoE,GAAG,4BACHC,MAAM,sBACNC,WAAS,EACTC,KAAK,IACLC,OAAO,SACP7D,QAAQ,WACRiC,SAAU1C,KAAK8D,eACflD,UAAU,cACdf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiD,QAAS/C,KAAKgE,eAAgBvD,QAAQ,WAAWC,KAAK,SAASC,MAAM,WAA7E,UACAd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwE,EAAD,cA5Cc1D,aAqDfC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BC,qBCtDvCyD,6MAMFC,eAAiB,WACb,IAAIC,EAAmB1D,EAAKf,MAAMC,WAAWC,eAC7CwE,IAAM,CACFC,OAAQ,OACRC,IAAK,YACLC,KAAMJ,IACPK,KAAK,SAACC,GAELhE,EAAKf,MAAMiC,SADE,CAAEH,KAAM,YAEtBkD,MAAM,SAACC,GACNC,MAAM,gCAEVnE,EAAKf,MAAMkC,QAAQC,KAAK,sFAGxB,OACIvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeC,QAAnD,KACAP,EAAAC,EAAAC,cAAA,4BAAoBC,KAAKC,MAAMC,WAAWC,eAAeE,eACzDR,EAAAC,EAAAC,cAAA,sBAAcC,KAAKC,MAAMC,WAAWC,eAAeG,SACnDT,EAAAC,EAAAC,cAAA,uBAAeC,KAAKC,MAAMC,WAAWC,eAAeI,UACpDV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiC,KAAK,SAAStB,QAAQ,YAAYE,MAAM,UAAUoC,QAAS/C,KAAKyE,gBAAxE,mBA9BC5D,aA0CNC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8B0D,GC3CvCY,6MACFC,kBAAoB,WAChBrE,EAAKf,MAAMkC,QAAQC,KAAK,8EAGxB,OAEIvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQiD,QAAS/C,KAAKqF,kBAAmB5E,QAAQ,WAAWC,KAAK,SAASC,MAAM,WAAhF,+BATOE,aAmBRC,cAHc,SAACZ,GAAD,MAAiB,CAC1CA,WAAYA,IAEDY,CAA8BsE,GCY9BE,mLAvBX,OACEzF,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACwF,EAAA,EAAD,KACE1F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQa,UAAU,cAChBf,EAAAC,EAAAC,cAAA,MAAIa,UAAU,aAAd,mBACAf,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wCAENF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5E,IACjClB,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,yBAAyBC,UAAWzC,IACtDrD,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,mBAAmBC,UAAWnC,IAChD3D,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWC,IACjD/F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWnB,IACvC3E,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWP,cAhBnCvE,aCAZgF,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrB,KAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzE,QACfoE,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB9B,MAAM,SAAAC,GACL4B,QAAQ5B,MAAM,4CAA6CA,uCCpE7D8B,GACJ,CACI5G,QAAS,EACTC,cAAe,EACfC,QAAS,EACTC,SAAU,IA0BR0G,GAAgBC,aAClBC,aAAgB,CACZhH,eAzBe,WAAyC,IAAxC8B,EAAwCmF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhCJ,GAAqBlF,EAAWsF,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,MAAoB,gBAAhBxF,EAAOC,KACAd,OAAAsG,EAAA,EAAAtG,CAAA,GAAKgB,EAAZ,CAAmB7B,QAAS0B,EAAOE,UAEd,sBAAhBF,EAAOC,KACLd,OAAAsG,EAAA,EAAAtG,CAAA,GAAKgB,EAAZ,CAAmB5B,cAAeyB,EAAOE,UAEpB,gBAAhBF,EAAOC,KACLd,OAAAsG,EAAA,EAAAtG,CAAA,GAAKgB,EAAZ,CAAmB3B,QAASwB,EAAOE,UAEd,iBAAhBF,EAAOC,KACLd,OAAAsG,EAAA,EAAAtG,CAAA,GAAKgB,EAAZ,CAAmB1B,SAAUuB,EAAOE,UAEf,UAAhBF,EAAOC,KACLd,OAAAsG,EAAA,EAAAtG,CAAA,GACAgB,EADP,CACc7B,QAAS,EACnBC,cAAe,EACfC,QAAS,EACTC,SAAU,KAGX0B,KAMPuF,aAAgBC,OAGpBC,IAASC,OAAO9H,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,CAAUC,MAAOZ,IAAepH,EAAAC,EAAAC,cAAC+H,EAAD,OAC5CC,SAASC,eAAe,SD9Bb,WACb,GAA6C,kBAAmB3B,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,GAAwBnC,OAAOC,UAC3CmC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,OAAQ,WAC9B,IAAMhC,EAAK,GAAAiC,OAAMH,GAAN,sBAEPrC,GAiDV,SAAiCO,GAE/BkC,MAAMlC,GACHrB,KAAK,SAAAC,GAGkB,MAApBA,EAASuD,SACuD,IAAhEvD,EAASwD,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrC,UAAUC,cAAcqC,MAAM5D,KAAK,SAAAyB,GACjCA,EAAaoC,aAAa7D,KAAK,WAC7BgB,OAAOC,SAAS6C,aAKpB1C,GAAgBC,KAGnBnB,MAAM,WACL6B,QAAQC,IACN,mEArEA+B,CAAwB1C,GAIxBC,UAAUC,cAAcqC,MAAM5D,KAAK,WACjC+B,QAAQC,IACN,+GAMJZ,GAAgBC,MCGxB2C","file":"static/js/main.c5dd0dce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass FeelingReview extends Component {\n    render() {\n        return (\n            // displays list of the users feedback, will update in realtime as the user progresses through feedback site\n            // button will remaim incomplete and unaccessable untill all required fields are submitted\n            <div>\n                <h1> Review your feedback </h1>\n                <ul>\n                    <li >Feeling:  {this.props.reduxStore.feedbackReview.feeling} </li>\n                    <li>Understanding: {this.props.reduxStore.feedbackReview.understanding}</li>\n                    <li>Support: {this.props.reduxStore.feedbackReview.support}</li>\n                    <li>Comments: {this.props.reduxStore.feedbackReview.comments}</li>\n                    <br />\n                    <Button variant=\"outlined\" size=\"medium\" color=\"primary\" className=\"disabled\">Incomplete </Button>\n                </ul>\n            </div>\n        );\n    }\n}\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(FeelingReview);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport FeelingReview from './FeelingReview.js';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\n\nclass FeelingFeedback extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            feelingToAdd: {\n                feeling: '',\n            }\n        } // end state\n    } // end constructor\n\n    // changes the local state depnding on what number is selected in the FormControl\n    feelingChange = (event) => {\n        this.setState({\n            feelingToAdd: parseInt(event.target.value),\n        })\n    } // end feelingChange\n\n    // on Next button click, will send local state as action to reduxStore which updates the feedbackReview feeling property\n    // value to whatever value was selected, button click also sends you to next understanding page\n    submitFeeling = () => {\n        let feeling = this.state.feelingToAdd\n        let action = { type: 'ADD_FEELING', payload: feeling }\n        this.props.dispatch(action);\n        this.props.history.push('/understandingfeedback')\n    }\n    render() {\n        return (\n            // material ui select, allows user to choose 1-5 with 1 being lowest to see how they are feeling\n            <div>\n                <h1> How are you feeling today? </h1>\n                <FormControl  >\n                    <InputLabel required htmlFor=\"age-native-helper\">Select</InputLabel>\n                    <NativeSelect\n                        value={this.state.feeling}\n                        onChange={this.feelingChange}\n                        input={<Input name=\"select\" />} >\n                        <option value=\"\" />\n                        <option value={1}>1 </option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5 </option>\n                    </NativeSelect>\n                    <FormHelperText>Select from 1-5 where 1 being the lowest</FormHelperText>\n                </FormControl>\n                <br />\n                <br />\n                <Button onClick={this.submitFeeling} variant=\"outlined\" size=\"medium\" color=\"primary\" > Next </Button>\n                <br />\n                <FeelingReview />\n            </div>\n            // FeelingReview child component which shows live update of what the user has selected\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(FeelingFeedback);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass UnderstandingReview extends Component {\n    render() {\n        return (\n            // displays list of the users feedback, will update in realtime as the user progresses through feedback site\n            // button will remaim incomplete and unaccessable untill all required fields are submitted\n            <div>\n                <h1> Review your feedback </h1>\n                <ul>\n                    <li >Feeling:  {this.props.reduxStore.feedbackReview.feeling} </li>\n                    <li>Understanding: {this.props.reduxStore.feedbackReview.understanding}</li>\n                    <li>Support: {this.props.reduxStore.feedbackReview.support}</li>\n                    <li>Comments: {this.props.reduxStore.feedbackReview.comments}</li>\n                    <br />\n                    <Button variant=\"outlined\" size=\"medium\" color=\"primary\" className=\"disabled\">Incomplete </Button>\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(UnderstandingReview);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UnderstandingReview from './UnderstandingReview';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\n\nclass UnderstandingFeedback extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            understandingToAdd: {\n                understanding: '',\n            }\n        } // end state\n    } // end constructor\n\n    // changes the local state depnding on what number is selected in the FormControl\n    understandingToChange = (event) => {\n        this.setState({\n            understandingToAdd: parseInt(event.target.value),\n        })\n    } // end feelingChange\n\n    // on Next button click, will send local state as action to reduxStore which updates the feedbackReview understanding property\n    // value to whatever value was selected, button click also sends you to support page\n    submitUnderstanding = () => {\n        let understanding = this.state.understandingToAdd\n        let action = { type: 'ADD_UNDERSTANDING', payload: understanding }\n        this.props.dispatch(action);\n        this.props.history.push('/supportfeedback')\n    }\n    render() {\n        return (\n            // material ui select, allows user to choose 1-5 with 1 being lowest to see how they are feeling\n            <div>\n                <h1> How well are you understanding the content? </h1>\n                <FormControl >\n                    <InputLabel required htmlFor=\"age-native-helper\">Select</InputLabel>\n                    <NativeSelect\n                        value={this.state.understanding}\n                        onChange={this.understandingToChange}\n                        input={<Input name=\"select\" />}  >\n                        <option value=\"\" />\n                        <option value={1}>1 </option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5 </option>\n                    </NativeSelect>\n                    <FormHelperText>Select from 1-5 where 1 being the lowest</FormHelperText>\n                </FormControl>\n                <br />\n                <br />\n                <Button onClick={this.submitUnderstanding} variant=\"outlined\" size=\"medium\" color=\"primary\" > Next </Button>\n                <UnderstandingReview />\n            </div>\n            // UnderstandingReview child component which shows live update of what the user has selected\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(UnderstandingFeedback);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass SupportReview extends Component {\n    render() {\n        return (\n            // displays list of the users feedback, will update in realtime as the user progresses through feedback site\n            // button will remaim incomplete and unaccessable untill all required fields are submitted\n            <div>\n                <h1> Review your feedback </h1>\n                <ul>\n                    <li >Feeling:  {this.props.reduxStore.feedbackReview.feeling} </li>\n                    <li>Understanding: {this.props.reduxStore.feedbackReview.understanding}</li>\n                    <li>Support: {this.props.reduxStore.feedbackReview.support}</li>\n                    <li>Comments: {this.props.reduxStore.feedbackReview.comments}</li>\n                    <br />\n                    <Button variant=\"outlined\" size=\"medium\" color=\"primary\" className=\"disabled\">Incomplete </Button>\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(SupportReview);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SupportReview from './SupportReview.js';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\n\nclass SupportFeedback extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            supportToAdd: {\n                support: '',\n            }\n        } // end state\n    } // end constructor\n\n    // changes the local state depnding on what number is selected in the FormControl\n    supportToChange = (event) => {\n        this.setState({\n            supportToAdd: parseInt(event.target.value),\n        })\n\n    } // end feelingChange\n\n    // on Next button click, will send local state as action to reduxStore which updates the feedbackReview support property\n    // value to whatever value was selected, button click also sends you to comments page\n    submitSupport = () => {\n        let support = this.state.supportToAdd\n        let action = { type: 'ADD_SUPPORT', payload: support }\n        this.props.dispatch(action);\n        this.props.history.push('/commentsfeedback')\n    }\n    render() {\n        return (\n            // material ui select, allows user to choose 1-5 with 1 being lowest to see how they are feeling\n            <div>\n                <h1> How well are you being supported? </h1>\n                <FormControl >\n                    <InputLabel required htmlFor=\"age-native-helper\">Select</InputLabel>\n                    <NativeSelect\n                        value={this.state.support}\n                        onChange={this.supportToChange}\n                        input={<Input name=\"select\" />}  >\n                        <option value=\"\" />\n                        <option value={1}>1 </option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5 </option>\n                    </NativeSelect>\n                    <FormHelperText>Select from 1-5 where 1 being the lowest</FormHelperText>\n                </FormControl> <br /> <br />\n                <Button onClick={this.submitSupport} variant=\"outlined\" size=\"medium\" color=\"primary\" > Next </Button>\n                <br />\n                <br />\n                <SupportReview />\n            </div>\n            // SupportReview child component which shows live update of what the user has selected\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(SupportFeedback);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass CommentsReview extends Component {\n    render() {\n        return (\n            // displays list of the users feedback, will update in realtime as the user progresses through feedback site\n            // button will remaim incomplete and unaccessable untill all required fields are submitted\n            <div>\n                <h1> Review your feedback </h1>\n                <ul>\n                    <li >Feeling:  {this.props.reduxStore.feedbackReview.feeling} </li>\n                    <li>Understanding: {this.props.reduxStore.feedbackReview.understanding}</li>\n                    <li>Support: {this.props.reduxStore.feedbackReview.support}</li>\n                    <li>Comments: {this.props.reduxStore.feedbackReview.comments}</li>\n                    <br />\n                    <Button variant=\"outlined\" size=\"medium\" color=\"primary\" className=\"disabled\">Incomplete </Button>\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(CommentsReview);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CommentsReview from './CommentsReview.js';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nclass FeelingFeedback extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            commentsToAdd: {\n                comments: '',\n            }\n        } // end state\n    } // end constructor\n\n    // changes the local state depnding on what number is selected in the FormControl\n    commentsChange = (event) => {\n        this.setState({\n            commentsToAdd: (event.target.value),\n        })\n    } // end feelingChange\n\n    // on Next button click, will send local state as action to reduxStore which updates the feedbackReview comments property\n    // value to what the user typed in the textfield, button click also sends you to review page\n    submitComments = () => {\n        let comments = this.state.commentsToAdd\n        let action = { type: 'ADD_COMMENTS', payload: comments }\n        this.props.dispatch(action);\n        this.props.history.push('/review')\n    }\n    render() {\n        return (\n            <div>\n                <h1> Any additional comments you want to leave? </h1>\n\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Additional Comments\"\n                    multiline\n                    rows=\"4\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={this.commentsChange}\n                    className=\"textfield\" />\n                <br />\n                <br />\n                <Button onClick={this.submitComments} variant=\"outlined\" size=\"medium\" color=\"primary\" > Next </Button>\n                <br />\n                <br />\n                <CommentsReview />\n            </div>\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(FeelingFeedback);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\nclass Review extends Component {\n    // submit button creates axios post request to your local server,\n    // on submit click, your feedbackReview reducer from reduxStore is sent and stored in databsae\n    // allowing you to retrieve that feedback information the user has submitted throughout the app\n    // once axios request has gone through, a RESET action is sent to reduxStore, which resets the feedbackReview\n    // reducer and its properties to the inital state, `\n    submitFeedback = () => {\n        let feedbackToServer = this.props.reduxStore.feedbackReview;\n        axios({\n            method: 'POST',\n            url: '/feedback',\n            data: feedbackToServer\n        }).then((response) => {\n            let action = { type: 'RESET' }\n            this.props.dispatch(action);\n        }).catch((error) => {\n            alert('Post to server not working')\n        });\n        this.props.history.push('/thankyou')\n    }\n    render() {\n        return (\n            <div>\n                <h1> Review your feedback </h1>\n                <ul>\n                    <li>Feeling: {this.props.reduxStore.feedbackReview.feeling} </li>\n                    <li>Understanding: {this.props.reduxStore.feedbackReview.understanding}</li>\n                    <li>Support: {this.props.reduxStore.feedbackReview.support}</li>\n                    <li>Comments: {this.props.reduxStore.feedbackReview.comments}</li>\n                    <br />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" onClick={this.submitFeedback}>Submit</Button>\n\n                </ul>\n            </div>\n\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Review);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nclass Thankyou extends Component {\n    submitNewFeedback = () => {\n        this.props.history.push('/')\n    }\n    render() {\n        return (\n            // button click sends you to inital feeling feedback page\n            <div>\n                <h1> Success! Thank you. </h1>\n                <Button onClick={this.submitNewFeedback} variant=\"outlined\" size=\"medium\" color=\"primary\" > Leave new feedback</Button>\n            </div>\n\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Thankyou);","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, } from 'react-router-dom';\nimport FeelingFeedback from './../FeelingFeedback/FeelingFeedback.js';\nimport UnderstandingFeedback from './../UnderstandingFeedback/UnderstandingFeedback.js';\nimport SupportFeedback from './../SupportFeedback/SupportFeedback.js';\nimport CommentsFeedback from './../CommentsFeedback/CommentsFeedback.js';\nimport Review from './../ReviewPage/ReviewPage.js';\nimport Thankyou from './../ReviewPage/ThankyouPage.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <header className=\"App-header\">\n              <h1 className=\"App-title\">Feedback survey</h1>\n              <h2><i>We want to hear from you!</i></h2>\n            </header>\n            <br />\n            <Route exact path=\"/\" component={FeelingFeedback} />\n            <Route exact path=\"/understandingfeedback\" component={UnderstandingFeedback} />\n            <Route exact path=\"/supportfeedback\" component={SupportFeedback} />\n            <Route exact path=\"/commentsfeedback\" component={CommentsFeedback} />\n            <Route exact path=\"/review\" component={Review} />\n            <Route exact path=\"/thankyou\" component={Thankyou} />\n\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport logger from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n\n// reducers below\n// setting initial state to 0 and empty strings to display beginning progress and reset state\nlet feedbackReviewItems =\n{\n    feeling: 0,\n    understanding: 0,\n    support: 0,\n    comments: ''\n};\n// created feedback reducuer which updates state and its properties depending on action type\nconst feedbackReview = (state = feedbackReviewItems, action) => {\n    if (action.type === 'ADD_FEELING') {\n        return { ...state, feeling: action.payload }\n    }\n    else if (action.type === 'ADD_UNDERSTANDING') {\n        return { ...state, understanding: action.payload }\n    }\n    else if (action.type === 'ADD_SUPPORT') {\n        return { ...state, support: action.payload }\n    }\n    else if (action.type === 'ADD_COMMENTS') {\n        return { ...state, comments: action.payload }\n    }\n    else if (action.type === 'RESET') {\n        return {\n            ...state, feeling: 0,\n            understanding: 0,\n            support: 0,\n            comments: ''\n        }\n    }\n    return state;\n}\nconst storeInstance = createStore(\n    combineReducers({\n        feedbackReview,\n    }), // end combineReducers\n    applyMiddleware(logger),\n);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}